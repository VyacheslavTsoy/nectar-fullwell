{% assign sst = section.settings %}
{% assign blocks = section.blocks %}
{% assign discountsMetaobjects = metaobjects.discounts.values %}

{% assign pouches = blocks | where: 'type', 'quantity' | first %}
{% assign gifts = blocks | where: 'type', 'gifts' | first %}

{% if sst.products != blank %}
<div class="checkout" x-data="checkout">
    <div class="checkout__inner max-w-[42.5rem] mx-auto px-[2rem] py-[2.4rem] pb-[1.2rem]">
        {% for block in blocks %}
            {%- assign index = forloop.index -%}
            {%- if gifts -%}
                {%- assign index = index | minus: 1 -%}
            {%- endif -%}

            {% case block.type %}
                {% when 'gifts' %}
                    {% render 'checkout-gifts', block: block, index: index %}
                {% when 'quantity' %}
                    {% render 'checkout-quantity', block: block, index: index %}
                {% when 'flavors' %}
                    {% render 'checkout-flavors', block: block, index: index %}
                {% when 'frequency' %}
                    {% render 'checkout-frequency', block: block, index: index %}
            {% endcase %}
        {% endfor %}
    </div>

    <div class="checkout__cta sticky bottom-0 left-0 right-0 font-family-poppins">
        <div class="checkout__cta-inner max-w-[39.3rem] mx-auto px-[2rem] text-sm">
            <template x-if="purchaseType === 'one-time'">
                <div class="checkout__cta-total flex items-center justify-between gap-2 mb-2">
                    <div class="checkout__cta-saving font-bold font-family-poppins">
                        You’re <span x-text="currentPouch?.saving_percent_one_time"></span> Off
                    </div>
    
                    <div class="checkout__cta-total-price">
                        <div class="price" :data-compare-price="currentPouch?.compare_price_one_time > currentOneTimePrice ? formatMoney(currentPouch?.compare_price_one_time) : null" x-text="formatMoney(currentOneTimePrice)"></div>
                    </div>
                </div>
            </template>
            <template x-if="purchaseType === 'subscription'">
            <div class="checkout__cta-total flex items-center justify-between gap-2 mb-2">
                <div class="checkout__cta-saving font-bold font-family-poppins">
                    You’re <span x-text="currentPouch?.saving_percent_subscription"></span> Off
                </div>

                <div class="checkout__cta-total-price">
                    <div class="price" :data-compare-price="currentPouch?.compare_price_subscription > currentSubscriptionPrice ? formatMoney(currentPouch?.compare_price_subscription) : null" x-text="formatMoney(currentSubscriptionPrice)"></div>
                </div>
            </div>
            </template>

            <button class="checkout__cta-btn" :disabled="currentQty < minQty" @click="addToCart">
                <span x-show="currentQty < minQty" class="flex items-center justify-center gap-4">
                    <span>
                        Select <span x-text="minQty - currentQty"></span> More Pouches 
                    </span>
                    <svg width="23" height="28" viewBox="0 0 23 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3.42302 28C2.68264 28 2.04905 27.7391 1.52225 27.2173C0.994559 26.6947 0.730713 26.0667 0.730713 25.3333V12C0.730713 11.2667 0.994559 10.6387 1.52225 10.116C2.04905 9.59422 2.68264 9.33333 3.42302 9.33333H4.76917V6.66667C4.76917 4.82222 5.42565 3.24978 6.7386 1.94933C8.05065 0.649778 9.63776 0 11.4999 0C13.3621 0 14.9497 0.649778 16.2626 1.94933C17.5747 3.24978 18.2307 4.82222 18.2307 6.66667V9.33333H19.5769C20.3173 9.33333 20.9513 9.59422 21.479 10.116C22.0058 10.6387 22.2692 11.2667 22.2692 12V25.3333C22.2692 26.0667 22.0058 26.6947 21.479 27.2173C20.9513 27.7391 20.3173 28 19.5769 28H3.42302ZM7.46148 9.33333H15.5384V6.66667C15.5384 5.55556 15.1458 4.61111 14.3605 3.83333C13.5753 3.05556 12.6217 2.66667 11.4999 2.66667C10.3781 2.66667 9.42462 3.05556 8.63937 3.83333C7.85411 4.61111 7.46148 5.55556 7.46148 6.66667V9.33333ZM11.4999 21.3333C12.2403 21.3333 12.8744 21.0724 13.4021 20.5507C13.9289 20.028 14.1923 19.4 14.1923 18.6667C14.1923 17.9333 13.9289 17.3053 13.4021 16.7827C12.8744 16.2609 12.2403 16 11.4999 16C10.7596 16 10.126 16.2609 9.59917 16.7827C9.07148 17.3053 8.80764 17.9333 8.80764 18.6667C8.80764 19.4 9.07148 20.028 9.59917 20.5507C10.126 21.0724 10.7596 21.3333 11.4999 21.3333Z" fill="white"/>
                        </svg>
                </span>

                <span x-show="currentQty >= minQty">
                    {{ section.settings.cta_label }}
                </span>
            </button>
        </div>
    </div>
</div>

{% capture cart_flow %}
  {% if sst.cart_flow == 'go-to-checkout' %}
    true
  {% else %}
    false
  {% endif %}
{% endcapture %}

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('checkout', () => ({
            sticksPerPouch: 30,
            subscriptionPricePerStick: 0,
            oneTimePricePerStick: 0,
            freeShippingMinItems: 2,
            redirectToCheckout: {{ cart_flow }},
            minQty: 0,
            maxQty: 0,
            currentPouch: null,
            currentQty: 0,
            currentProduct: null,
            currentSinglePrice: 0,
            currentOneTimePrice: 0,
            currentSubscriptionPrice: 0,
            subscriptionSaving: 0,
            subscriptionSavingPercentage: 0,
            subscriptionPricePerUnit: 0,
            oneTimePricePerUnit: 0,
            oneTimeSaving: 0,
            oneTimeSavingPercentage: 0,
            amountOfChoosedFlavors: 0,
            purchaseType: 'subscription',
            selectedSellingPlan: null,
            currentDiscount: {
                oneTime: null,
                subscription: null
            },
            relatedDiscounts: null,
            relatedPoucheSellingPlan: null,
            currentBundleOriginalPrice: 0,
            pouches:[
                {%- for pouch in pouches.settings.related_pouches -%}
                    {% assign badge_text = pouch.badge_text | downcase %}
                    {
                        minQty: {{ pouch.title | split: ' ' | first }},
                        relatedPoucheSellingPlan: '{{ pouch.related_subscription_plan_name }}',
                        title: '{{ pouch.title }}',
                        quantity: '{{ pouch.quantity }}',
                        {% if template contains 'offer' %}
                            saving_percent_subscription: '{{ pouch.saving_percent_optionally_offer_page }}',
                        {% else %}
                            saving_percent_subscription: '{{ pouch.saving_percent }}',
                        {% endif %}
                        saving_percent_one_time: '{{ pouch.saving_percent_one_time }}',
                        compare_price_subscription: {{ pouch.crossed_out_price_subscription | default: 0 }},
                        compare_price_one_time: {{ pouch.crossed_out_price_one_time | default: 0 }},
                        {%- if badge_text contains 'best' -%}
                            blue_badge: '{{ pouch.badge_text }}',
                        {%- endif -%}
    
                        {%- if badge_text contains 'most' -%}
                            yellow_badge: '{{ pouch.badge_text }}',
                        {% endif %}
                    } {% unless forloop.last %},{% endunless %}
                {% endfor %}
            ],
            products: Alpine.store('productsStorage').products || [],
            {% if discountsMetaobjects != blank %}
            discounts: [
                {%- for discount in discountsMetaobjects -%}
                    {
                        relatedProducts: {%- if discount.related_products and discount.related_products.value -%}{{ discount.related_products.value | map: 'id' | json }}{%- else -%}null{%- endif -%},
                        oneTimePrices: [
                            {%- if discount.discounts_thresholds_one_time_purchase and discount.discounts_thresholds_one_time_purchase.value -%}
                                {%- for oneTimePrice in discount.discounts_thresholds_one_time_purchase.value -%}
                                    {% assign priceArray = oneTimePrice | split: '-' %}
                                    {
                                        quantity: {%- if priceArray.size > 0 -%}{{ priceArray[0] }}{%- else -%}0{%- endif -%},
                                        discountAmount: {%- if priceArray.size > 1 -%}{{ priceArray[1] }}{%- else -%}0{%- endif -%},
                                    }{%- unless forloop.last -%},{%- endunless -%}
                                {%- endfor -%}
                            {% endif %}
                        ],
                        subscriptionPrices: [
                            {%- if discount.discounts_thresholds_subscription_purchase and discount.discounts_thresholds_subscription_purchase.value -%}
                                {%- for subscriptionPrice in discount.discounts_thresholds_subscription_purchase.value -%}
                                    {% assign priceArray = subscriptionPrice | split: '-' %}
                                    {
                                        quantity: {%- if priceArray.size > 0 -%}{{ priceArray[0] }}{%- else -%}0{%- endif -%},
                                        discountAmount: {%- if priceArray.size > 1 -%}{{ priceArray[1] }}{%- else -%}0{%- endif -%}
                                    }{%- unless forloop.last -%},{%- endunless -%}
                                {%- endfor -%}
                            {%- endif -%}
                        ]
                    }{%- unless forloop.last -%},{%- endunless -%}
                {%- endfor -%}
            ],
            {% endif %}

            {% if gifts.settings.products != blank %}
                giftsProducts: [
                    {%- for product in gifts.settings.products -%}
                        {
                            giftMinQty: {{ forloop.index }},
                            id: {{ product.id }},
                            title: '{{ product.title }}',
                            price: {{ product.price }},
                            image: '{{ product.featured_image | image_url: width: 300 }}',
                            variant_id: {{ product.first_available_variant.id | default: product.variants[0].id }}
                        }{%- unless forloop.last -%},{%- endunless -%}
                    {%- endfor -%}
                ],
            {% endif %}

            formatMoney(price) {
                const newPrice = (price / 100).toFixed(2);
                return `$${newPrice}`;
            },

            countAmountOfChoosedFlavors() {
                this.currentQty = this.currentProduct.variants.reduce((acc, variant) => acc + variant.quantity, 0);
                let minQty = this.minQty;

                if (this.currentQty > this.minQty && this.minQty <= this.maxQty) {
                    minQty = this.currentQty;
                } else if (this.currentQty > this.maxQty) {
                    minQty = this.maxQty;
                }
                this.updateCurrentPouch(minQty);

                this.setupCurrentDiscount();
            },

            updateCurrentPouch(minQty) {
                this.minQty = minQty ? minQty : this.pouches.reduce((max, pouch) => Math.max(max, pouch.minQty), 0);
                this.currentPouch = this.pouches.find(pouch => pouch.minQty === this.minQty);

                this.relatedPoucheSellingPlan = this.currentPouch?.relatedPoucheSellingPlan;
            },

            updateCheckout() {
                this.countAmountOfChoosedFlavors();
                this.updatePrice();
                this.setupSellingPlan();
            },

            setupSellingPlan() {
                if (this.relatedPoucheSellingPlan) {
                    this.selectedSellingPlan = this.currentProduct.sellingPlans.find(sellingPlan => sellingPlan?.name?.includes(this.relatedPoucheSellingPlan))?.id;
                }
            },
            
            setUpCurrentProduct() {
                const productHandle = new URLSearchParams(window.location.search).get('product-handle');

                if (!productHandle) {
                    this.currentProduct = this.products[1];
                } else {
                    this.currentProduct = this.products.find(product => product.handle === productHandle);
                }
            },

            setupRelatedDiscounts() {
                const currentProduct = this.currentProduct;
                const relatedDiscounts = this.discounts.find(discount => discount.relatedProducts.includes(currentProduct.id));

                this.relatedDiscounts = relatedDiscounts;
            },

            setupCurrentDiscount() {
                this.currentDiscount.oneTime = this.relatedDiscounts.oneTimePrices.find(item => item.quantity == this.minQty) || null;
                this.currentDiscount.subscription = this.relatedDiscounts.subscriptionPrices.find(item => item.quantity == this.minQty) || null;
            },

            setUpMinQty() {
                const pouches = this.pouches;

                this.minQty = pouches.reduce((max, pouch) => Math.max(max, pouch.minQty), 0);
                this.maxQty = pouches.reduce((max, pouch) => Math.max(max, pouch.minQty), 0);
                this.updateCurrentPouch();
            },

            updatePrice() {
                const bundlePrice = (this.currentProduct?.variants[0].price || 0) * this.minQty;

                const getDiscountedPrice = (discount) =>
                    discount?.discountAmount ? bundlePrice - discount.discountAmount : bundlePrice;

                this.currentSinglePrice = this.currentProduct?.variants[0].price || 0;
                this.currentBundleOriginalPrice = bundlePrice;

                this.currentOneTimePrice = getDiscountedPrice(this.currentDiscount?.oneTime);
                this.currentSubscriptionPrice = getDiscountedPrice(this.currentDiscount?.subscription);

                if (this.currentQty > this.maxQty) {
                    this.subscriptionPricePerUnit = this.currentSubscriptionPrice / this.minQty;

                    console.log(this.subscriptionPricePerUnit, 123);
                }

                const calcSaving = (original, discounted) => ({
                    amount: original - discounted,
                    percent: original ? Math.round(((original - discounted) / original) * 100) : 0
                });

                const oneTime = calcSaving(bundlePrice, this.currentOneTimePrice);
                const subscription = calcSaving(bundlePrice, this.currentSubscriptionPrice);

                this.oneTimeSaving = oneTime.amount;
                this.oneTimeSavingPercentage = oneTime.percent;
                this.subscriptionSaving = subscription.amount;
                this.subscriptionSavingPercentage = subscription.percent;

                const totalSticks = this.sticksPerPouch * this.minQty || 1;
                this.subscriptionPricePerStick = this.currentSubscriptionPrice / totalSticks;
                this.oneTimePricePerStick = this.currentOneTimePrice / totalSticks;

                {% comment %} console.log(this.currentQty, this.currentOneTimePrice, this.currentSubscriptionPrice, 9999); {% endcomment %}
            },

            resetCheckout() {
                this.currentProduct.variants.forEach(variant => {
                    variant.quantity = 0; 
                });

                this.updateCheckout();
            },

            addToCart() {
                const itemsForCart = [];

                this.currentProduct.variants.forEach(variant => {
                    if (variant.quantity > 0) {
                        itemsForCart.push({
                            id: variant.id,
                            quantity: variant.quantity,
                            selling_plan: this.purchaseType === 'subscription' ? this.selectedSellingPlan : null
                        });
                    }
                });

                if (this.giftsProducts) {
                    this.giftsProducts.forEach(product => {
                        const ifItemInCart = Alpine.store('miniCart').cart.items.some(item => item.id === product.variant_id);
                        if (product.giftMinQty <= this.currentQty && !ifItemInCart) {
                            itemsForCart.push({
                                id: product.variant_id,
                                quantity: 1
                            });
                        }
                    });
                }

                if (itemsForCart.length > 0) {
                    Alpine.store('miniCart').addItem(itemsForCart, this.redirectToCheckout);
                    this.resetCheckout();
                }
            },

            setupDefaultValues() {
                this.setUpMinQty();
                this.setUpCurrentProduct();
                this.setupRelatedDiscounts();
                this.setupCurrentDiscount();
                this.updatePrice();
                this.setupSellingPlan();
            },

            init() {
                this.setupDefaultValues();

                console.log(this.redirectToCheckout, 111);
            }
        }))
    })
</script>
{% endif %}
{% style %}
  .checkout__flavor {
    border-radius: 0.6rem;
    border: 1px solid #ccc;
  }
  .checkout__flavor-image   {
    border-radius: 0.6rem 0 0 0.6rem;
  }

  .checkout .qty-picker__btn  {
    width: 2.8rem;
    height: 2.8rem;
    border-radius: 50%;
    background-color: #0D3063;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .qty-picker__input {
    font-size: 2.6rem;
    font-weight: 500;
    color: #111111;
    font-family: 'Poppins', sans-serif;
  }

  .checkout__size input ,
  .checkout__frequency input {
    display: none;
  }

  .checkout__size {
    cursor: pointer;
  }

  .checkout__size:hover .checkout__size-inner,
  .checkout__size input:checked + .checkout__size-inner {
    border-color: #0D3063;
    box-shadow: inset 0 0 0 1px #0D3063;
    background-color: #E2F0FF99;
  }

  .checkout__size-inner {
    font-family: 'Poppins', sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: .4rem;
    padding: .9rem 1.2rem .6rem;
    border-radius: 0.6rem;
    border: 1px solid #ccc;
    background-color: #f9f9f9;
    text-align: center;
    transition: all 0.3s ease;
  }

  .checkout__size-saving {
    background-color: #21A600;
    color: #fff;
    font-size: 1.2rem;
    font-weight: 500;
    line-height: 1.8rem;
    padding: 0 1.2rem;
    border-radius: 1.2rem;
    font-family: 'Poppins', sans-serif;
    min-width: 10.6rem;
    text-align: center;
  }

  [data-blue-label],
  [data-yellow-label] {
    position: relative;
  }

  [data-blue-label]::before ,
  [data-yellow-label]::before {
    content: attr(data-blue-label);
    position: absolute;
    top: -0.8rem;
    left: 50%;
    text-align: center;
    background: linear-gradient(90deg, #0D3063 0%, #1A61C9 100%);
    display: block;
    transform: translateX(-50%);
    font-size: 1rem;
    font-weight: 700;
    font-family: 'Poppins', sans-serif;
    color: #fff;
    border-radius: 0.3rem;
    padding: 0 1.6rem;
    line-height: 1.6rem;
    white-space: nowrap;
    display: block;
  }

  [data-yellow-label]::before   {
    background: #FFE427 !important;
    color: #0D3063;
    content: attr(data-yellow-label);
  }

  .checkout__frequency-item {
    border-radius: 0.8rem;
    border: 1px solid #D5D7DA;
    padding: 1rem 1.4rem;
    background-color: #fff;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .checkout__frequency-item:hover,
  .checkout__frequency-item--active {
    border-color: #0D3063;
    background-color: #E2F0FF;
  }

  .checkout__frequency-title::before {
    content: '';
    display: block;
    width: 1.6rem;
    height: 1.6rem;
    background-color: #fff;
    border: 1px solid #D5D7DA;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .checkout__frequency-item--active .checkout__frequency-title::before {
    box-shadow: inset 0 0 0 3px #0D3063;
    border-color: #0D3063;
  }

  .checkout__frequency-features li {
    background-image: url("data:image/svg+xml,%3Csvg width='21' height='20' viewBox='0 0 21 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url(%23clip0_72_5199)'%3E%3Crect x='0.5' width='20' height='20' rx='10' fill='%2375BDFF'/%3E%3Cg clip-path='url(%23clip1_72_5199)'%3E%3Cpath d='M1.15785 5.23144C-1.68864 7.66793 -4.04783 11.1516 -5.80025 14.9236C-5.8471 15.0266 -5.99235 15.0243 -6.03921 14.9236C-7.09581 12.5761 -8.19927 10.8518 -9.44564 9.94981C-9.55575 9.87019 -9.48547 9.69677 -9.35192 9.71318C-7.99778 9.8842 -6.51715 10.7627 -5.91973 11.6647C-4.28211 8.81121 -1.99554 6.691 1.00792 5.01821C1.14614 4.94091 1.27733 5.12834 1.15785 5.23144Z' fill='white'/%3E%3Cpath d='M16.1578 5.23144C13.3114 7.66793 10.9522 11.1516 9.19975 14.9236C9.1529 15.0266 9.00765 15.0243 8.96079 14.9236C7.90419 12.5761 6.80073 10.8518 5.55436 9.94981C5.44425 9.87019 5.51453 9.69677 5.64808 9.71318C7.00222 9.8842 8.48285 10.7627 9.08027 11.6647C10.7179 8.81121 13.0045 6.691 16.0079 5.01821C16.1461 4.94091 16.2773 5.12834 16.1578 5.23144Z' fill='white'/%3E%3C/g%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='clip0_72_5199'%3E%3Crect x='0.5' width='20' height='20' rx='10' fill='white'/%3E%3C/clipPath%3E%3CclipPath id='clip1_72_5199'%3E%3Crect width='20' height='20' fill='white' transform='translate(0.5)'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E%0A");
    background-size: 2rem;
    background-repeat: no-repeat;
    background-position: left 0;
    padding-left: 2.6rem;
    padding-top: .3rem;
    min-height: 2.4rem;
    white-space: nowrap;
  }

  .checkout__cta {
    border-top: 2px solid #0D3063;
    background-color: #E4FEE5;
    padding: 0.6rem 1rem 1.1rem;
  }

  .checkout__cta-btn {
    line-height: 5.4rem;
    font-size: 1.6rem;
    font-weight: 700;
    color: #fff;
    background-color: #0D3063;
    border-radius: 0.6rem;
    padding: 0 1.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    width: 100%;
  }

  .checkout__cta-btn:disabled {
    background-color: #6E6E6E;
    color: #fff;
    cursor: not-allowed;
  }

  .mini-cart__subscription-features ul {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0;
  }

  .shopify-section-group-footer-group,
  #shopify-section-announcement-bar {
    display: none;
  }

  {% if gifts %}
    .header .header__nav,
    .header .header__tools,
    .header .header__burger {
      display: none;
    }

    .header__logo {
        display: flex;
        cursor: default;
        justify-content: center;
    }

    .header__logo a{
        cursor: default;
    }

    .header__text  {
        display: block;
    }
  {% endif %}
{% endstyle %}


{% schema %}
{
  "name": "Checkout",
  "settings": [
    {
      "type": "select",
      "id": "cart_flow",
      "label": "Cart Flow",
      "default": "add-to-cart",
      "options": [
        {
          "value": "add-to-cart",
          "label": "Add to Cart"
        },
        {
          "value": "go-to-checkout",
          "label": "Go to Checkout"
        }
      ]
    },
    {
      "type": "header",
      "content": "Products"
    },
    {
      "type": "product_list",
      "label": "Products",
      "id": "products",
      "info": "Choose all available products"
    },
    {
        "type": "header",
        "content": "Labels"
    },
    {
      "type": "text",
      "id": "label_one_time",
      "label": "One-time Label",
      "default": "One-time Purchase"
    },
    {
      "type": "text",
      "id": "label_subscription",
      "label": "Subscription Label",
      "default": "Subscribe and Save 50%"
    },
    {
      "type": "text",
      "id": "label_delivery",
      "label": "Delivery Label",
      "default": "Delivery Every"
    },
    {
      "type": "richtext",
      "id": "label_subscription_description",
      "label": "Subscription Description"
    },
    {
      "type": "text",
      "id": "cta_label",
      "label": "CTA Label",
      "default": "Go to checkout"
    },
    {
      "type": "richtext",
      "id": "gurantee_text",
      "label": "Gurantee Text"
    },
    {
      "type": "richtext",
      "id": "subscription_details",
      "label": "Subscription Details"
    }
  ],
  "blocks": [
    {
      "type": "quantity",
      "name": "Quantity",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Select Quantity"
        },
        {
          "type": "metaobject_list",
          "id": "related_pouches",
          "label": "Related Pouches",
          "metaobject_type": "pouche"
        }
      ]
    },
    {
        "type": "flavors",
        "name": "Flavors",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title",
            "default": "Select Flavors"
          }
        ]
    },
    {
      "type": "frequency",
      "name": "Frequencies",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Select Frequency"
        }
      ]
    },
    {
      "type": "gifts",
      "name": "Gifts",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Unlock Free Gifts!"
        },
        {
          "type": "text",
          "id": "description",
          "label": "Description",
          "default": "Add a 4th Pouch, Get an Electric Nectar Frother"
        },
        {
          "type": "product_list",
          "id": "products",
          "label": "Products",
          "info": "Sort the gift products according to the number of flavors (1,2,3,4)"
        }
      ]
    }
  ]
}
{% endschema %}