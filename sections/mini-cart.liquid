{% render 'entry' with '@/styles/sections/mini-cart.scss' %}

{% assign sst = section.settings %}
{% assign shipping_date = 'now' | date: '%s' %}


<div class="mini-cart fixed z-50 top-0 px-[1.7rem] py-[1.2rem] right-0 max-w-[100%] w-[39.3rem] md:w-[58rem] h-full bg-white" x-data="Alpine.store('miniCart')" :class="{ 'mini-cart--open': Alpine.store('miniCart').isOpen }">
    <div class="mini-cart__inner flex flex-col h-full">
        
        <div class="mini-cart__header mb-4 flex items-center justify-between">
            {% if sst.title != blank %}
                <h3 class="mini-cart__title text-lg font-bold">{{ sst.title }}</h3>
            {% endif %}

            <button class="mini-cart__close w-[3.2rem] h-[3.2rem] rounded-full bg-[#E9F4FF] flex items-center justify-center" x-data @click="$store.miniCart.isOpen = false">
                <svg width="14" height="14" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10.825 8.5001L15.8354 3.48967C16.389 2.93607 16.389 2.03854 15.8354 1.4858L15.1675 0.81785C14.6137 0.264076 13.7162 0.264076 13.1634 0.81785L8.15318 5.82811L3.14274 0.816812C2.58914 0.263211 1.69162 0.263211 1.13888 0.816812L0.469888 1.48477C-0.0837128 2.03854 -0.0837128 2.93607 0.469888 3.4888L5.48119 8.5001L0.470926 13.5104C-0.0828478 14.0641 -0.0828478 14.9617 0.470926 15.5144L1.13888 16.1824C1.69248 16.736 2.59001 16.736 3.14274 16.1824L8.15318 11.1719L13.1634 16.1824C13.7172 16.736 14.6147 16.736 15.1675 16.1824L15.8354 15.5144C16.389 14.9606 16.389 14.0631 15.8354 13.5104L10.825 8.5001Z" fill="#0D3063"/>
                    </svg>                    
            </button>

        </div>

        <div class="mini-cart__shipping mb-8 rounded-[.5rem] bg-[#E9F4FF] p-[0.8rem]" x-data="{ freeShippingCost: {{ sst.free_shipping_amount }} }">
            <div class="mini-cart__shipping-bar bg-white rounded-full">
                <div :style="{ width: subscriptionItemsInCart ? '100%' : cart?.total_price / freeShippingCost * 100 + '%' }" class="mini-cart__shipping-bar-inner bg-[#FF5C5C] rounded-full h-[0.8rem] max-w-[100%] transition-all duration-300" :class="{ 'mini-cart__shipping-bar-inner--active': $store.miniCart?.cart?.total_price >= freeShippingCost || subscriptionItemsInCart}">
                </div>
            </div>
            <div class="mini-cart__shipping-text text-center text-sm pt-2 text-[#000]">
                <span x-show="cart?.total_price < freeShippingCost && !subscriptionItemsInCart">
                    You are <span x-text="$store.miniCart.formatMoney(freeShippingCost - $store.miniCart?.cart?.total_price)"></span> Away from <b><i>Free Shipping</i></b>
                </span>

                <span x-show="$store.miniCart?.cart?.total_price >= freeShippingCost || subscriptionItemsInCart">
                    Free shipping unlocked!
                </span>
            </div>

            <div class="bg-white flex items-center justify-between rounded-[3rem] px-2 py-2 md:py-[.25rem] md:px-[0.8rem] text-xs mt-2 max-w-[33.8rem] mx-auto">
                <div class="product__cta-shipping-label">
                    <div class="flex items-center gap-1">
                        <div class="w-[1.6rem] h-[1.6rem] mr-1 bg-[#7FB190] rounded-full blink-animation"></div>
                        Ships by
        
                        <b><em>{{ shipping_date | date: '%a, %b %d' }}</em></b>
                    </div>
                </div>
                <div class="product__cta-shipping-label flex items-center gap-2">
                    <svg width="22" height="20" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M24 4.09277H0V20.0929H24V4.09277Z" fill="white"></path>
                        <path d="M24 6.09253H0V8.09236H24V6.09253Z" fill="#D80027"></path>
                        <path d="M24 10.0928H0V12.0926H24V10.0928Z" fill="#D80027"></path>
                        <path d="M24 14.0923H0V16.0921H24V14.0923Z" fill="#D80027"></path>
                        <path d="M24 18.0925H0V20.0924H24V18.0925Z" fill="#D80027"></path>
                        <path d="M12 4.09277H0V12.7083H12V4.09277Z" fill="#2E52B2"></path>
                        <path d="M4.67923 7.62207L4.48596 8.21663H3.86084L4.36667 8.5839L4.1734 9.17841L4.67923 8.81115L5.18473 9.17841L4.99151 8.5839L5.49734 8.21663H4.87217L4.67923 7.62207Z" fill="white"></path>
                        <path d="M4.87217 10.3621L4.67923 9.76758L4.48596 10.3621H3.86084L4.36667 10.7294L4.1734 11.3239L4.67923 10.9566L5.18473 11.3239L4.99151 10.7294L5.49734 10.3621H4.87217Z" fill="white"></path>
                        <path d="M2.23012 10.3621L2.03714 9.76758L1.84388 10.3621H1.21875L1.72458 10.7294L1.53131 11.3239L2.03714 10.9566L2.54269 11.3239L2.34947 10.7294L2.8552 10.3621H2.23012Z" fill="white"></path>
                        <path d="M2.03714 7.62207L1.84388 8.21663H1.21875L1.72458 8.5839L1.53131 9.17841L2.03714 8.81115L2.54269 9.17841L2.34947 8.5839L2.8552 8.21663H2.23012L2.03714 7.62207Z" fill="white"></path>
                        <path d="M4.67923 5.47632L4.48596 6.07093H3.86084L4.36667 6.43824L4.1734 7.03276L4.67923 6.66544L5.18473 7.03276L4.99151 6.43824L5.49734 6.07093H4.87217L4.67923 5.47632Z" fill="white"></path>
                        <path d="M2.03714 5.47632L1.84388 6.07093H1.21875L1.72458 6.43824L1.53131 7.03276L2.03714 6.66544L2.54269 7.03276L2.34947 6.43824L2.8552 6.07093H2.23012L2.03714 5.47632Z" fill="white"></path>
                        <path d="M7.32127 7.62207L7.12805 8.21663H6.50293L7.00871 8.5839L6.81554 9.17841L7.32127 8.81115L7.82687 9.17841L7.6336 8.5839L8.13943 8.21663H7.5143L7.32127 7.62207Z" fill="white"></path>
                        <path d="M7.5143 10.3621L7.32127 9.76758L7.12805 10.3621H6.50293L7.00871 10.7294L6.81554 11.3239L7.32127 10.9566L7.82687 11.3239L7.6336 10.7294L8.13943 10.3621H7.5143Z" fill="white"></path>
                        <path d="M10.1559 10.3621L9.96288 9.76758L9.76961 10.3621H9.14453L9.65027 10.7294L9.45705 11.3239L9.96288 10.9566L10.4684 11.3239L10.2752 10.7294L10.781 10.3621H10.1559Z" fill="white"></path>
                        <path d="M9.96288 7.62207L9.76961 8.21663H9.14453L9.65027 8.5839L9.45705 9.17841L9.96288 8.81115L10.4684 9.17841L10.2752 8.5839L10.781 8.21663H10.1559L9.96288 7.62207Z" fill="white"></path>
                        <path d="M7.32127 5.47632L7.12805 6.07093H6.50293L7.00871 6.43824L6.81554 7.03276L7.32127 6.66544L7.82687 7.03276L7.6336 6.43824L8.13943 6.07093H7.5143L7.32127 5.47632Z" fill="white"></path>
                        <path d="M9.96288 5.47632L9.76961 6.07093H9.14453L9.65027 6.43824L9.45705 7.03276L9.96288 6.66544L10.4684 7.03276L10.2752 6.43824L10.781 6.07093H10.1559L9.96288 5.47632Z" fill="white"></path>
                        </svg>
        
                        <p>Expedited <strong>USPS</strong> Shipping</p>
                </div>
            </div>
        </div>

        
        <div class="mini-cart__products">
            <template x-for="item in $store.miniCart?.cart?.items" :key="item.key">
                <div class="mini-cart__product mb-4 flex items-center gap-4">
                    <div class="mini-cart__product-image flex-shrink-0 bg-[#E9F4FF] w-[8.2rem] h-[8.2rem] p-3 rounded-[.5rem]">
                        <img :src="item.image" :alt="item.product_title" class="w-full h-full object-cover">
                    </div>
    
                    <div class="mini-cart__product-info w-[90%] text-sm">
                        <h4 class="mini-cart__product-title whitespace-nowrap text-sm font-bold" x-text="item.product_title"></h4>
                        <div class="mini-cart__product-variant text-sm font-medium" x-text="item.variant_title"></div>
                        <div class="mini-cart__product-selling-plan mb-1 text-xs text-[#5D5D5D]">
                            <span x-show="item?.selling_plan_allocation" x-text="item?.selling_plan_allocation?.selling_plan?.name"></span>

                            <span x-show="!item?.selling_plan_allocation">One Time Purchase</span>
                        </div>
                        <div class="mini-cart__product-price font-family-poppins flex items-center gap-2 text-xs text-[#199A47] font-bold" x-text="formatMoney(item.final_line_price)" :data-compare-price="item.original_line_price > item.final_line_price ? formatMoney(item.original_line_price) : null"></div>
                    </div>
    
                    <div class="mini-cart__product-cta w-[9rem] flex-shrink-0 flex justify-end" x-data="{ quantity: item.quantity }" x-effect="quantity = item.quantity" x-show="item.final_line_price > 0">
                        <div class="qty-picker flex items-center gap-2 mb-2 text-[#111111]">
                            <button class="qty-picker__btn" @click="if (quantity > 0) { quantity--; updateItem({ id: item.key, quantity: quantity }) }">
                                <svg width="10" height="3" viewBox="0 0 10 3" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M0.534084 2.14009H8.87706C9.1046 2.14009 9.25629 1.9884 9.25629 1.76086V1.00241C9.25629 0.774875 9.1046 0.623184 8.87706 0.623184H0.534084C0.306549 0.623184 0.154859 0.774875 0.154859 1.00241V1.76086C0.154859 1.9884 0.306549 2.14009 0.534084 2.14009Z" fill="#3D3D3D"/>
                                </svg>                                
                            </button>
                            <input type="text" class="qty-picker__input text-center w-[2.4rem]" :value="quantity" @change="quantity = $event.target.value; updateItem({ id: item.key, quantity: quantity })">
                            <button class="qty-picker__btn" @click="quantity++; updateItem({ id: item.key, quantity: quantity })">
                                <svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M0.594739 5.00245V5.7609C0.594739 5.98844 0.746429 6.14013 0.973965 6.14013H4.387V9.55317C4.387 9.7807 4.53869 9.93239 4.76623 9.93239H5.52468C5.75221 9.93239 5.90391 9.7807 5.90391 9.55317V6.14013H9.31694C9.54448 6.14013 9.69617 5.98844 9.69617 5.7609V5.00245C9.69617 4.77492 9.54448 4.62322 9.31694 4.62322H5.90391V1.21019C5.90391 0.982654 5.75221 0.830963 5.52468 0.830963H4.76623C4.53869 0.830963 4.387 0.982654 4.387 1.21019V4.62322H0.973965C0.746429 4.62322 0.594739 4.77492 0.594739 5.00245Z" fill="#3D3D3D"/>
                                </svg>                                
                            </button>
                        </div>
                    </div>
                </div>
            </template>
        </div>

        <div class="mini-cart__footer mt-auto pt-[1.2rem]">
            {% if sst.upsell_products != blank %}
            <h3 class="mini-cart__footer-title text-sm font-bold mb-2 text-[#111111]">{{ sst.frequently_bought_together }}:</h3>
            <div class="mini-cart__upsell swiper">
                <div class="swiper-wrapper">
                    <template x-for="product in filteredUpsellProducts" :key="product.id">
                        <template x-for="variant in product.variants" :key="variant.id">
                            <div class="swiper-slide">
                                <div class="mini-cart__upsell-product gap-4 flex bg-[#E9F4FF] py-2 px-2">
                                    <div class="mini-cart__upsell-image w-[4.7rem] h-[4.7rem] flex-shrink-0">
                                        <a :href="product.url">
                                            <img :src="variant.image" :alt="product.title" class="w-full h-full object-cover">
                                        </a>
                                    </div>
        
                                    <div class="mini-cart__upsell-info text-xs w-full relative">
                                        <h4 class="mini-cart__upsell-title text-xs mb-1 text-base font-bold">
                                            <a :href="product.url" x-text="product.title"></a>
                                        </h4>
                                        <div class="mini-cart__upsell-variant text-xs font-medium mt-0">
                                            <span x-text="variant.title"></span>
                                        </div>
                                        <div class="mini-cart__upsell-selling-plan text-[1rem] mt-1 text-[#222222]">
                                            One Time Add On
                                        </div>
                                    </div>
        
                                    <div class="mini-cart__upsell-cta flex flex-col items-end">
                                        <div class="mini-cart__upsell-price font-family-poppins text-sm mb-2 font-bold" x-text="formatMoney(variant.price)"></div>
        
                                        <button class="mini-cart__upsell-btn" @click="addItem([{ 'id': variant.id, 'quantity': 1 }])">
                                            Add+
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </template>
                </div>

                <div class="swiper-pagination"></div>
            </div>
            {% endif %}
            
            <div class="mini-cart__cta pt-[3rem]" x-show="!subscriptionItemsInCart && cart?.total_price > 0">
                <button class="btn btn-primary w-full mini-cart__cta-btn" 
                    x-data="{
                        labels: `{{ sst.save_badge }}`.split('|').map(s => s.trim()),
                        get currentLabel() {
                          let count = cart?.item_count || 0
                          return this.labels[Math.min(count - 1, this.labels.length - 1)] || this.labels[0]
                        }
                      }"
                    :data-off-label="currentLabel" 
                    @click="$store.miniCart.upgrateItemsToSubscription()"
                >
                    <span class="mini-cart__cta-btn-text">{{ sst.subscription_cta }}</span>
                    <span class="mini-cart__cta-btn-price flex items-center">
                        <span class="inline-flex items-center gap-2">
                            <u x-text="formatMoney(cart?.original_total_price)"></u>
                            <span x-text="formatMoney(cart?.total_price)"></span>
                        </span>

                        <span class="inline-block ml-2">
                            <svg width="6" height="12" viewBox="0 0 6 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M0.0433226 1.25751L0.927489 0.330008L5.74332 5.38488C5.82095 5.46588 5.88256 5.5622 5.9246 5.66829C5.96664 5.77438 5.98828 5.88816 5.98828 6.00307C5.98828 6.11798 5.96664 6.23176 5.9246 6.33785C5.88256 6.44394 5.82095 6.54026 5.74332 6.62126L0.927489 11.6788L0.0441556 10.7513L4.56416 6.00438L0.0433226 1.25751Z" fill="currentColor"/>
                            </svg>
                        </span>
                    </span>
                </button>
    
                <div class="mini-cart__subscription-features py-[.6rem] max-w-[34rem] mx-auto">

                    {% if sst.subscription_features != blank %}
                    <div class="mini-cart__subscription-features-list text-[#222222]">
                        {{ sst.subscription_features }}
                    </div>
                    {% endif %}
                </div>
                
                {% form 'cart', cart, class: 'mini-cart__cta-form' %}
                <button class="btn w-full btn-outline mini-cart__cta-btn" name="checkout">
                    <span class="mini-cart__cta-btn-text">{{ sst.one_time_cta }}</span>
                    <span class="mini-cart__cta-btn-price flex items-center gap-1">
                        <span x-text="formatMoney(cart?.total_price)"></span>

                        <span class="inline-block ml-2">
                            <svg width="6" height="12" viewBox="0 0 6 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M0.0433226 1.25751L0.927489 0.330008L5.74332 5.38488C5.82095 5.46588 5.88256 5.5622 5.9246 5.66829C5.96664 5.77438 5.98828 5.88816 5.98828 6.00307C5.98828 6.11798 5.96664 6.23176 5.9246 6.33785C5.88256 6.44394 5.82095 6.54026 5.74332 6.62126L0.927489 11.6788L0.0441556 10.7513L4.56416 6.00438L0.0433226 1.25751Z" fill="currentColor"/>
                            </svg>
                        </span>
                    </span>      
                </button>
                {% endform %}

                <div class="mini-cart__features text-xs flex flex-col gap-2 items-center mt-[0.8rem] font-bold">
                    <div class="mini-cart__features-item flex items-center gap-2">
                        <b>4.8</b> {% render 'stars', score: 5 %} {{ sst.additional_text }}
                    </div>
                </div>
            </div>

            {% form 'cart', cart, class: 'mini-cart__cta-form' %}
                <div class="mini-cart__cta pt-4" x-show="subscriptionItemsInCart && cart?.total_price > 0">
                    <div class="mini-cart__cta-subtotal flex items-center justify-between mb-3">
                        <div class="font-medium">Subtotal (<span x-text="cart?.item_count"></span> item)</div>
                        <div class="price font-family-poppins" :data-compare-price="cart?.original_total_price > cart?.total_price ? formatMoney(cart?.original_total_price) : null" x-text="formatMoney(cart?.total_price)"></div>
                    </div>

                    <button class="btn btn-primary w-full mini-cart__cta-btn mini-cart__cta-btn--checkout" name="checkout">
                        <span class="mini-cart__cta-btn-text">Proceed to Checkout</span>
                    </button>
        
                    <div class="mini-cart__features text-xs flex flex-col gap-2 items-center mt-[0.8rem] font-bold">
                        <div class="mini-cart__features-item flex items-center gap-2">
                            <b>4.8</b> {% render 'stars', score: 5 %} {{ sst.additional_text }}
                        </div>
                    </div>
                </div>
            {% endform %}
        </div>
    </div>
</div>

<div x-data class="mini-cart-overlay" :class="{ 'mini-cart-overlay--active': $store.miniCart.isOpen }" @click="$store.miniCart.isOpen = false"></div>

<script>

    document.addEventListener('alpine:init', () => {

        const swiper = new Swiper('.mini-cart__upsell.swiper', {
            slidesPerView: 'auto',
            spaceBetween: 6,
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            }
        });

        const debounce = (func, wait) => {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        };
    
        Alpine.store('miniCart', {
            isOpen: false,
            cart: null,
            subscriptionItemsInCart: false,
            freeShippingCost: 4000,
            defaultSellingPlanID: 1657143355,

            upsellProducts: [
                {% for product in section.settings.upsell_products %}
                {
                    id: {{ product.id }},
                    title: '{{ product.title }}',
                    price: {{ product.price | default: 0 }},
                    variants: [
                        {% for variant in product.variants %}
                        {
                            id: {{ variant.id }},
                            title: '{{ variant.title }}',
                            image: '{{ variant.image | image_url: width: 250 }}',
                            price: {{ variant.price | default: 0 }},
                        } {% unless forloop.last %},{% endunless %}
                        {% endfor %}
                    ]
                } {% unless forloop.last %},{% endunless %}
                {% endfor %}
            ],

            filteredUpsellProducts: [],

            checkIfFreeProductsOnlyInCart() {
                const freeProducts = this.cart?.item_count > 0 && this.cart?.total_price === 0;
                
                if (freeProducts) {
                    this.clearCart();
                }
            },

            clearCart() {
                fetch(window.Shopify.routes.root + 'cart/clear.js', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => {
                    this.loadCart();
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            },
    
            loadCart() {
                return fetch(window.Shopify.routes.root + 'cart.js')
                .then(response => response.json())
                .then(data => {
                    this.cart = data;

                    this.subscriptionItemsInCart = this.cart?.items?.some(item => item.selling_plan_allocation);
                });
            },
          
            updateItem: debounce((item) => {
                
                let updates = {
                    [item.id]: item.quantity
                };
                
                fetch(window.Shopify.routes.root + 'cart/update.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ updates })
                })
                .then(response => {
                    Alpine.store('miniCart').loadCart();
                    return response.json();
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }, 300),
            
            formatMoney(price) {
                const newPrice = (price / 100).toFixed(2);
                return `$${newPrice}`;
            },
    
            addItem(items, redirectToCheckout) {
                let formData = {
                    'items': items,
                };
                
                fetch(window.Shopify.routes.root + 'cart/add.js', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    this.loadCart();
                
                    if (redirectToCheckout) {
                        window.location.href = window.Shopify.routes.root + 'checkout';
                    } else {
                        this.isOpen = true;
                    }

                    return response.json();
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            },

            filterUpsellProducts() {
                const cartItems = this.cart?.items?.map(item => item.product_id);
                const products = this.upsellProducts;

                this.filteredUpsellProducts = products.filter(product => !cartItems.includes(product.id));

                if (!this.filteredUpsellProducts.length) {
                    this.filteredUpsellProducts = this.upsellProducts;
                }

                setTimeout(() => {
                    swiper.update();
                }, 100);
                
            },
    
            async upgrateItemsToSubscription() {
                const updates = {};
                const itemsToAdd = this.cart?.items?.map(item => ({
                    id: item.variant_id,
                    quantity: item.quantity,
                    selling_plan: this.defaultSellingPlanID
                }));
    
                this.cart?.items?.forEach(item => {
                    updates[item.key] = 0;
                });
                
    
                await fetch(window.Shopify.routes.root + 'cart/update.js', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ updates })
                });
    
                const addResponse = await fetch(window.Shopify.routes.root + 'cart/add.js', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ items: itemsToAdd })
                });
                
                if (addResponse.ok) {
                    window.location.href = '/checkout';
                } else {
                    console.error('Error adding product to cart', await addResponse.json());
                }
    
                this.loadCart();
            },
      
            init: async function() {
                await this.loadCart();

                this.filterUpsellProducts();

                if (this.cart?.items?.some(item => item.discounts?.some(discount => discount.title == 'GIFT'))) {
                    this.clearCart();
                }
            }
        });
      });
    
</script>



{% schema %}
{
  "name": "Mini Cart",
  "settings": [
    {
        "type": "header",
        "content": "Labels"
    },
    {
        "type": "text",
        "label": "Title",
        "id": "title",
        "default": "Your Cart"
    },
    {
        "type": "text",
        "label": "Save Badge",
        "id": "save_badge",
        "default": "Get 40% off Today"
    },
    {
        "type": "text",
        "label": "Save With Subscription",
        "id": "subscription_cta",
        "default": "Save With Subscription"
    },
    {
        "type": "text",
        "label": "Continue One-time Purchase",
        "id": "one_time_cta",
        "default": "Continue One-time Purchase"
    },
    {
        "type": "header",
        "content": "Subscription Features"
    },
    {
        "type": "richtext",
        "label": "Subscription Features",
        "id": "subscription_features"
    },
    {
        "type": "text",
        "label": "Frequently Bought Together",
        "id": "frequently_bought_together",
        "default": "Frequently Bought Together"
    },
    {
        "type": "text",
        "label": "Additional Text",
        "id": "additional_text",
        "default": "1,000,000+ Happy Customers"
    },
    {
        "type": "header",
        "content": "Upsell products"
    },
    {
        "type": "product_list",
        "label": "Upsell products",
        "id": "upsell_products",
        "info": "Select the products to display in the upsell block"
    },
    {
        "type": "header",
        "content": "Shipping"
    },
    {
        "type": "number",
        "label": "Free shipping amount",
        "id": "free_shipping_amount",
        "default": 4599
    },
    {
        "type": "text",
        "label": "Shipping success message",
        "id": "shipping_success_message",
        "default": "<p>Congrats! You've unlocked FREE SHIPPING!</p>"
    }
    
  ]
}
{% endschema %}