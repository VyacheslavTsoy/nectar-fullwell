{% assign bst = block.settings %}

<div class="tabs" id="{{ block.id }}" x-data="tabs">
    <div class="container">
        <div class="tabs__nav {% if bst.hide_nav %}hidden{% endif %}">
            <div class="btn-group w-full md:w-auto flex gap-2 md:justify-center mb-2 md:mb-4">
                <div class="btn-group__inner py-1.5 px-1.5 flex gap-2 w-full md:w-auto bg-white">
                    <template x-for="tab in tabs" :key="tab.handle">
                        <button class="btn-sm w-[11.4rem]" x-text="tab.title" @click="Alpine.store('productsStorage').activePurpose = tab.title" :class="{ 'btn-sm--active': Alpine.store('productsStorage').activePurpose == tab.title }"></button>
                    </template>
                </div>
            </div>
        </div>

        <div class="tabs__content">
            {% content_for 'blocks' %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('tabs', () => ({
            tabs: [],
            activeTab: null,
          
            collectTabs() {
              const parentEl = this.$el.closest('.tabs');
              const tabElements = parentEl.querySelectorAll('.tab-item[data-tab-name][data-tab-handle]');
          
              const uniqueTabs = new Map();
          
              tabElements.forEach(tab => {
                const tabName = tab.dataset.tabName;
                const tabHandle = tab.dataset.tabHandle;
                
                if (tabName && tabHandle) {
                  uniqueTabs.set(tabHandle, {
                    title: tabName,
                    handle: tabHandle
                  });
                }
              });
          
              this.tabs = Array.from(uniqueTabs.values());
            },

            filterByTab() {
                const parentEl = this.$el.closest('.tabs');
                const tabs = parentEl.querySelectorAll('.tab-item[data-tab-handle]');

                {% comment %} tabs.forEach(tab => {
                    tab.style.display =
                    tab.dataset.tabName === Alpine.store('productsStorage').activePurpose ? 'block' : 'none';
                }); {% endcomment %}

                console.log(Alpine.store('productsStorage').activePurpose, 222222)
            },
          
            init() {
              this.collectTabs();
              this.activeTab = this.tabs[0]?.handle || null;

              this.$watch('activeTab', () => {
                this.filterByTab();
              });
        
              this.filterByTab();
            }
          }));
    });
</script>

{% schema %}
{
  "name": "Tabs",
  "tag": null,
  "settings": [
    {
      "type": "checkbox",
      "id": "hide_nav",
      "label": "Hide nav",
      "default": false
    }
  ],
  "blocks": [{"type": "_tab-item"}],
  "presets": [
    {
      "name": "Tabs",
      "blocks": [
        {"type": "_tab-item", "settings": {"title": "Calm"}},
        {"type": "_tab-item", "settings": {"title": "Hydration"}},
        {"type": "_tab-item", "settings": {"title": "Energy"}}
      ]
    }
  ]
}
{% endschema %}
